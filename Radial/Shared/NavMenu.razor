@inject Radial.Services.Client.IJsInterop JsInterop 
@inject IClientConnection ClientConnection
@inject IMessagePublisher MessagePublisher 
@inject IToastService ToastService 
@inject NavigationManager NavMan

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">
        <img class="brand-image" src="/media/radial.png" />
        Radial
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="explore">
                        <span class="oi oi-map" aria-hidden="true"></span> Explore
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="character">
                        <span class="oi oi-person" aria-hidden="true"></span> Character
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="social">
                        <span class="oi oi-people" aria-hidden="true"></span> Social
                        @if (ClientConnection?.Character?.PartyInvites?.Count > 0)
                        {
                            <span id="missed-chat-badge" class="badge badge-info badge-pill ml-2">
                                @ClientConnection?.Character?.PartyInvites?.Count
                            </span>
                        }

                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="stats">
                        <span class="oi oi-calculator" aria-hidden="true"></span> Stats
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="editor">
                        <span class="oi oi-pencil" aria-hidden="true"></span> Editor
                    </NavLink>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>
            </NotAuthorized>
        </AuthorizeView>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="contact">
                <span class="oi oi-envelope-closed" aria-hidden="true"></span> Contact
            </NavLink>
        </li>

        <AuthorizeView>
            <Authorized>
                <li class="px-3 mt-3">
                    <a class="btn btn-link" href="Identity/Account/Manage">
                        Account
                    </a>
                </li>
                <li class="px-3">
                    <form method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="btn btn-link">Log out</button>
                    </form>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="px-3 mt-3">
                    <a class="btn btn-link" href="Identity/Account/Register">Register</a>
                </li>
                <li class="px-3">
                    <a class="btn btn-link" href="Identity/Account/Login">Log in</a>
                </li>
            </NotAuthorized>
        </AuthorizeView>

    </ul>

    <footer class="text-white small mt-5 ml-4">
        &copy; 2021 - <a href="https://lucency.co">Translucency Software</a>
    </footer>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool callAutoheight;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        callAutoheight = true;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MessagePublisher.DataStateChanged += (sender, args) =>
            {
                CheckInCombatState();
                InvokeAsync(StateHasChanged);
            };
        }
        if (callAutoheight)
        {
            callAutoheight = false;
            JsInterop.AutoHeight();
        }

        CheckInCombatState();
        return base.OnAfterRenderAsync(firstRender);
    }

    private void CheckInCombatState()
    {
        var message = "You're in combat!";

        if (ClientConnection?.Character?.State == CharacterState.InCombat &&
            !NavMan.Uri.Contains("explore") &&
            !ToastService.Toasts.Any(x=>x.Message == message))
        {
            ToastService.ShowToast(message, classString: "bg-danger");
        }
    }
}
