@page "/explore"
@attribute [Authorize]
@using System.Collections.Concurrent 
@inject IInputDispatcher InputDispatcher
@inject IMessagePublisher MessagePublisher
@inject IClientConnection ClientConnection
@inject IWorld World 
@inject IJsInterop JsInterop
@inherits AuthComponentBase

<div class="explore-container auto-height">
    <div style="overflow-y: auto">
        <div class="small explore-top-grid mb-2">
            <div>
                Location: X: @(Location?.XCoord) | Y: @(Location?.YCoord) | Z: @(Location?.ZCoord)
            </div>
        </div>
        @if (CurrentInteraction is null)
        {
            <h3>@Location?.Title</h3>
            <p>
                @Location?.Description
            </p>

            <p>
                <span class="text-info">Exits: </span>
                @if (Location?.Exits?.Any() == true)
                {
                    <span>@string.Join(", ", Location?.Exits?.Select(x => x.ToString()))</span>
                }
            </p>

            @if (Location?.Interactables?.Any() == true)
            {
                <p class="text-info">
                    @foreach (var interactable in Location.Interactables)
                    {
                        <div>@interactable.Prompt</div>
                    }
                </p>
            }

            <p class="text-success">
                @foreach (var character in GetNearbyCharacters())
                {
                    <div>
                        <span class="nearby-character" @onclick="() => SetTarget(character)">
                            @if (character.State == CharacterState.InCombat)
                            {
                                <span class="@(character.Type == CharacterType.NPC ? "text-danger" : "text-success")">
                                    @($"{character.Name} ({character.Type}) is attacking! " +
                                        $"(Target: {character.Target?.Name}) " +
                                        $"[Energy: {character.EnergyPercentFormatted}]")
                                </span>
                            }
                            else
                            {
                                @($"{character.Name} ({character.Type}) is here. [Energy: {character.EnergyPercentFormatted}]")
                            }
                        </span>
                    </div>
                }
            </p>
        }
        else
        {
            <h3>@CurrentInteraction?.Title</h3>
            <p>
                @CurrentInteraction?.Content
            </p>

            @if (CurrentInteraction?.Interactables?.Any() == true)
            {
                <p class="text-info">
                    @foreach (var interactable in Location?.Interactables)
                    {
                        <div>@interactable.Prompt</div>
                    }
                </p>
            }

        }
    </div>
    <div @ref="EventMessageDiv" style="overflow-y: auto">
        @foreach (var eventMessage in Events)
        {
            <div>
                <span class="mr-1">
                    [@eventMessage.Timestamp.ToString("g")]
                </span>
                <span class="@eventMessage.ClassName">
                     @eventMessage.Message
                </span>
            </div>
        }
    </div>
    <div class="p-2">
        <ActionBar />
    </div>

    <div class="mb-2">
        <ResourceBars />
    </div>
</div>

@code {
    public ConcurrentQueue<LocalEventMessage> Events { get; } = new ConcurrentQueue<LocalEventMessage>();

    private PlayerCharacter CharacterInfo { get; set; }
    private Interactable CurrentInteraction { get; set; }
    private Location Location { get; set; }

    private ElementReference EventMessageDiv { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetState();
            JsInterop.AutoHeight();
            StateHasChanged();
            RegisterMessageHandlers();
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void SetState()
    {
        CharacterInfo = ClientConnection.Character;
        CurrentInteraction = CharacterInfo?.Interaction;
        Location = ClientConnection.Location;
        InvokeAsync(StateHasChanged);
    }

    private IEnumerable<CharacterBase> GetNearbyCharacters()
    {
        return Location?.Characters?.Where(x => x != CharacterInfo) ?? Array.Empty<CharacterBase>();
    }

    private void RegisterMessageHandlers()
    {
        MessagePublisher.DataStateChanged += (sender, args) =>
        {
            SetState();
        };
        MessagePublisher.LocalEventReceived += async (sender, args) =>
        {
            while (Events.Count > 100)
            {
                Events.TryDequeue(out _);
            }
            Events.Enqueue(args);
            await InvokeAsync(StateHasChanged);
            JsInterop.ScrollToEnd(EventMessageDiv);
        };
        MessagePublisher.LocationChanged += (sender, args) =>
        {
            CharacterInfo.Target = null;
            SetState();
        };
    }

    private void SetTarget(CharacterBase target)
    {
        CharacterInfo.Target = target;
        InvokeAsync(StateHasChanged);
    }
} 