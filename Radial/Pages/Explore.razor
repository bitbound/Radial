@page "/explore"
@attribute [Authorize]
@inject IInputDispatcher InputDispatcher
@inject IMessagePublisher MessagePublisher
@inject IClientConnection ClientConnection
@inject IJsInterop JsInterop
@inherits AuthComponentBase

<div class="explore-container auto-height">
    <div style="align-self: baseline">
        @if (CurrentInteraction is null)
        {
            <h3>@Location.Title</h3>
            <p>
                @Location.Description
            </p>

            @if (Location.Interactables?.Any() == true)
            {
                <p class="text-info">
                    @foreach (var interactable in Location.Interactables)
                    {
                        <div>@interactable.Prompt</div>
                    }
                </p>
            }

            <p class="text-success">
                @foreach (var character in Location.Characters.Where(x => x.Id != CharacterInfo.Id))
                {
                    <div>@($"{character.Name} ({character.Type}) is here.")</div>
                }
            </p>
        }
        else
        {
            <h3>@CurrentInteraction.Title</h3>
            <p>
                @CurrentInteraction.Content
            </p>

            @if (CurrentInteraction.Interactables?.Any() == true)
            {
                <p class="text-info">
                    @foreach (var interactable in Location.Interactables)
                    {
                        <div>@interactable.Prompt</div>
                    }
                </p>
            }

        }
    </div>
    <div style="align-self: baseline">

    </div>
    <div class="p-2">
        <ActionBar />
    </div>

    <div class="mb-2">
        <ResourceBars />
    </div>
</div>

@code {
    private PlayerCharacter CharacterInfo => ClientConnection.Character;
    private Interactable CurrentInteraction => ClientConnection.Character.Interaction;
    private Location Location => ClientConnection.Location;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsInterop.AutoHeight();
            StateHasChanged();
            MessagePublisher.DataStateChanged += (sender, args) =>
            {
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
        }

        await base.OnAfterRenderAsync(firstRender);
    }
} 