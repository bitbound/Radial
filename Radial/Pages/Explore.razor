@page "/explore"
@attribute [Authorize]
@inject IInputDispatcher InputDispatcher
@inject IMessagePublisher MessagePublisher
@inject IClientConnection ClientConnection
@inject IWorld World 
@inject IJsInterop JsInterop
@inherits AuthComponentBase

<div class="explore-container auto-height">
    <div style="align-self: baseline">
        <div class="small location-grid mb-2">
            <div>
                Location: X: @(Location?.XCoord) | Y: @(Location?.YCoord) | Z: @(Location?.ZCoord)
            </div>
            <div>
                Target: @(CharacterInfo?.Target?.Name)
            </div>
        </div>
        @if (CurrentInteraction is null)
        {
            <h3>@Location?.Title</h3>
            <p>
                @Location?.Description
            </p>

            @if (Location?.Interactables?.Any() == true)
            {
                <p class="text-info">
                    @foreach (var interactable in Location?.Interactables)
                    {
                        <div>@interactable.Prompt</div>
                    }
                </p>
            }

            <p class="text-success">
                @foreach (var character in GetNearbyCharacters())
                {
                    <div>
                        <span class="nearby-character" @onclick="() => SetTarget(character)">
                            @($"{character.Name} ({character.Type}) is here.")
                        </span>
                    </div>
                }
            </p>
        }
        else
        {
            <h3>@CurrentInteraction?.Title</h3>
            <p>
                @CurrentInteraction?.Content
            </p>

            @if (CurrentInteraction?.Interactables?.Any() == true)
            {
                <p class="text-info">
                    @foreach (var interactable in Location?.Interactables)
                    {
                        <div>@interactable.Prompt</div>
                    }
                </p>
            }

        }
    </div>
    <div style="align-self: baseline">

    </div>
    <div class="p-2">
        <ActionBar />
    </div>

    <div class="mb-2">
        <ResourceBars />
    </div>
</div>

@code {
    private PlayerCharacter CharacterInfo { get; set; }
    private Interactable CurrentInteraction { get; set; }
    private Location Location { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetState();
            JsInterop.AutoHeight();
            StateHasChanged();
            MessagePublisher.DataStateChanged += (sender, args) =>
            {
                SetState();
            };
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void SetState()
    {
        CharacterInfo = ClientConnection.Character;
        CurrentInteraction = CharacterInfo?.Interaction;
        Location = ClientConnection.Location;
        InvokeAsync(StateHasChanged);
    }

    private IEnumerable<CharacterBase> GetNearbyCharacters()
    {
        return Location?.Characters?.Where(x => x.Name != CharacterInfo?.Name) ?? Array.Empty<CharacterBase>();
    }

    private void SetTarget(CharacterBase target)
    {
        CharacterInfo.Target = target;
        InvokeAsync(StateHasChanged);
    }
} 