@page "/social"
@attribute [Authorize]
@inject IMessagePublisher MessagePublisher
@inject IJsInterop JsInterop
@inject IClientManager ClientManager
@inject IModalService ModalService
@inject IClientConnection ClientConnection
@inject IPartyService PartyService 
@inject IToastService ToastService 
@inherits AuthComponentBase

<h3 class="mb-3">Social</h3>


<h4 class="mt-5 text-info">
    Players Online
</h4>

<div class="two-column-grid">
    <div>
        Count:
    </div>
    <div>
        @ClientManager.Clients.Count
    </div>
    <div>
        Who:
    </div>
    <div>
        <button class="btn btn-primary" @onclick="ShowOnlinePlayers">Show</button>
    </div>
</div>


<h4 class="mt-5 text-info">
    Party
</h4>

<div class="two-column-grid">

    @if (PC?.PartyInvites?.Any() == true)
    {
        foreach (var party in PC.PartyInvites)
        {
            <div>
                Invite from @(party.Leader.Name):
            </div>
            <div>
                <button class="btn btn-primary mr-3" @onclick="() => AcceptInvite(party)">Join</button>
                <button class="btn btn-danger" @onclick="() => DeclineInvite(party)">Decline</button>
            </div>
        }
    }

    @if (PC?.Party is null)
    {
        <div>
            Create Party:
        </div>
        <div>
            <button class="btn btn-primary" @onclick="CreateNewParty">New Party</button>
        </div>
    }
    else
    {
        @if (PC.Party.Leader == PC)
        {
            <div>
                Invite Player:
            </div>
            <div>
                <div class="input-group w-300">
                    <input type="text" class="form-control" placeholder="User name" @bind="_inviteeName" @bind:event="oninput" @onkeypress="SendInviteOnKeyPress" />
                    <div class="input-group-append cursor-pointer" title="Send invite">
                        <div class="input-group-text" @onclick="SendInvite">
                            <span class="oi oi-share"></span>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div style="align-self: start">
            Party Members:
        </div>
        <div style="align-self: start">
            <div>
                @(PC.Party.Leader.Name) (Leader)
            </div>

            @foreach (var member in PC.Party.Members.Except(new[] { PC.Party.Leader }))
            {
                <div>
                    @member.Name
                </div>
            }
        </div>
    }

</div>

@code {
    private string _inviteeName;

    private PlayerCharacter PC => ClientConnection?.Character;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MessagePublisher.DataStateChanged += (sender, args) =>
            {
                InvokeAsync(StateHasChanged);
            };
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void AcceptInvite(Party party)
    {
        PartyService.AcceptInvite(ClientConnection, party);
    }

    private void DeclineInvite(Party party)
    {
        PartyService.DeclineInvite(ClientConnection, party);
    }

    private void CreateNewParty()
    {
        PartyService.CreateNewParty(PC);
    }

    private void SendInvite()
    {
        PartyService.SendInvite(ClientConnection, _inviteeName?.Trim());
        _inviteeName = string.Empty;
    }

    private void SendInviteOnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key.ToLower() == "enter")
        {
            SendInvite();
        }
    }

    private void ShowOnlinePlayers()
    {
        ModalService.ShowModal("Online Players", ClientManager.Clients.Select(x => x.Character.Name).ToArray());
    }
}
