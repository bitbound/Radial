@attribute [Authorize]
@inherits AuthComponentBase
@using Radial.Data.Entities
@using Radial.Services
@using Radial.Services.Client
@inject IMessagePublisher MessagePublisher
@inject IClientConnection ClientConnection

<div class="resource-bars-container mx-4">
    <div class="text-center">
        <strong class="d-block">Energy</strong>
        <div class="progress">
            <div id="energy-bar" class="progress-bar" style="width: @(CharacterInfo?.EnergyPercentFormatted); overflow: visible;"></div>
        </div>
        <div class="text-white resource-bar-label">
            <span class="mr-1">@(CharacterInfo?.EnergyCurrent.ToString("N0") ?? "0")</span>
            <span class="small text-muted">(EXP: @(CharacterInfo?.ExperiencePercentFormatted))</span>
        </div>
    </div>
    <div class="text-center">
        <strong class="d-block">Charge</strong>
        <div class="progress">
            <div id="charge-bar" class="progress-bar" style="width: @(CharacterInfo?.ChargePercentFormatted); overflow: visible;"></div>
        </div>
        <div class="text-white resource-bar-label">
            @(CharacterInfo?.ChargeCurrent.ToString("N0") ?? "0")
        </div>
    </div>
</div>

@code {

    private CharacterBase CharacterInfo { get; set; }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MessagePublisher.DataStateChanged += (sender, args) =>
            {
                SetState();
            };
            SetState();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private void SetState()
    {
        CharacterInfo = ClientConnection.Character;
        InvokeAsync(StateHasChanged);
    }
}
