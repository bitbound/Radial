@using Radial.Models.Messaging
@using Radial.Enums
@using System.Collections.Concurrent
@using System.Linq
@inject Radial.Services.Client.IMessagePublisher MessagePublisher
@inject Radial.Services.Client.IJsInterop JsInterop
@inject Radial.Services.Client.IClientConnection ClientConnection
@inject Radial.Services.IClientManager ClientManager
@inject Radial.Services.Client.IToastService ToastService
@inherits AuthComponentBase

<button class="chat-button" @onclick="ChatButton_OnClick">
    <span class="oi oi-chat"></span>
    @if (_missedChatsCount > 0)
    {
        <span id="missed-chat-badge" class="badge badge-info badge-pill">
            @_missedChatsCount
        </span>
    }
</button>

<div class="chat-frame @_chatFrameOpenClass">
    <div>
        <button type="button" class="close float-left ml-2 mt-2" style="font-size:2em" aria-label="Close" @onclick="CloseChatFrame">
            <span aria-hidden="true">&times;</span>
        </button>
        <h4 class="text-center mt-2 mb-1">Chat</h4>
    </div>

    <div @ref="_chatMessageWindow" class="chat-message-window">
        @foreach (var chatMessage in _chatMessages)
        {
            <div class="chat-bubble-frame  @(IsMessageFromSelf(chatMessage) ? "self" : chatMessage.Channel.ToString().ToLower())">
                <div class="chat-timestamp small">
                    @GetMessageTitle(chatMessage)
                </div>
                <div class="chat-bubble">
                    <span class="chat-sender font-weight-bold" style="cursor: pointer" @onclick="() => StartPrivateChat(chatMessage.Sender)">
                        @(IsMessageFromSelf(chatMessage) ? "You" : chatMessage.Sender):
                    </span>
                    <span class="chat-message">@chatMessage.Message</span>
                </div>
            </div>
        }
    </div>
    <div class="chat-input">
        <div>
            <select class="small" @bind="_chatChannel">
                @foreach (var channel in GetSelectableChannels())
                {
                    <option value="@channel">@channel</option>
                }
            </select>
            <input class="small"
                   @bind="_privateChatRecipient"
                   @bind:event="oninput"
                   hidden="@(_chatChannel != ChatChannel.Private)"
                   placeholder="Enter recipient" />
        </div>

        <input class="form-control mb-1" placeholder="Enter a chat message"
               @onkeypress="ChatInput_OnKeyPress"
               @bind="CurrentInputText"
               @bind:event="oninput" />
    </div>
</div>

@code {
    private readonly ConcurrentQueue<ChatMessage> _chatMessages = new ConcurrentQueue<ChatMessage>();
    private string _chatFrameOpenClass;
    private ElementReference _chatMessageWindow;
    private string _currentInputText;
    private ChatChannel _chatChannel = ChatChannel.Global;
    private int _missedChatsCount;
    private string _privateChatRecipient;

    private string CurrentInputText
    {
        get => _currentInputText;
        set
        {
            if (value.Length > 200)
            {
                _currentInputText = String.Join("", value.Take(200));
            }
            else
            {
                _currentInputText = value;
            }
        }
    }
    private bool IsChatOpen => _chatFrameOpenClass == "open";


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MessagePublisher.ChatReceived += ChatReceived;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void ChatButton_OnClick(MouseEventArgs args)
    {
        _missedChatsCount = 0;

        if (string.IsNullOrWhiteSpace(_chatFrameOpenClass))
        {
            _chatFrameOpenClass = "open";
        }
        else
        {
            _chatFrameOpenClass = string.Empty;
        }

        StateHasChanged();
    }

    private void ChatInput_OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase))
        {
            if (string.IsNullOrWhiteSpace(_currentInputText))
            {
                return;
            }

            var message = new ChatMessage()
            {
                Channel = _chatChannel,
                Message = _currentInputText,
                Sender = Username,
                Recipient = _privateChatRecipient
            };

            switch (_chatChannel)
            {
                case ChatChannel.Global:
                    ClientManager.Broadcast(message);
                    break;
                case ChatChannel.Party:
                    if (string.IsNullOrWhiteSpace(ClientConnection.Character.PartyId))
                    {
                        ToastService.ShowToast("You are not in a party.", classString: "bg-warning");
                        return;
                    }
                    ClientManager.SendToParty(ClientConnection, message);
                    break;
                case ChatChannel.Local:
                    ClientManager.SendToOtherLocals(ClientConnection, message);
                    break;
                case ChatChannel.Private:
                    if (!ClientManager.SendToClient(ClientConnection, _privateChatRecipient, message, true))
                    {
                        ToastService.ShowToast("Player is not online.", classString: "bg-warning");
                        return;
                    }
                    break;
                default:
                    break;
            }

            _currentInputText = string.Empty;
            StateHasChanged();
        }
    }

    private void ChatReceived(object sender, ChatMessage chatMessage)
    {
        while (_chatMessages.Count > 100)
        {
            _chatMessages.TryDequeue(out _);
        }

        _chatMessages.Enqueue(chatMessage);

        if (!IsChatOpen)
        {
            _missedChatsCount++;
        }

        InvokeAsync(StateHasChanged).ContinueWith(task =>
        {
            JsInterop.ScrollToEnd(_chatMessageWindow);
        });
    }

    private void CloseChatFrame(MouseEventArgs args)
    {
        _chatFrameOpenClass = string.Empty;
        StateHasChanged();
    }

    private string GetMessageTitle(ChatMessage chatMessage)
    {
        if (chatMessage.Channel == ChatChannel.Private)
        {
            return IsMessageFromSelf(chatMessage) ?
                $"{chatMessage.Channel} to {chatMessage.Recipient} - {chatMessage.Timestamp}" :
                $"{chatMessage.Channel} from {chatMessage.Sender} - {chatMessage.Timestamp}";
        }
        else
        {
            return $"{chatMessage.Channel} - {chatMessage.Timestamp}";
        }
    }

    private IEnumerable<ChatChannel> GetSelectableChannels()
    {
        return Enum.GetValues(typeof(ChatChannel))
            .Cast<ChatChannel>()
            .Except(new[] { ChatChannel.System });
    }

    private bool IsMessageFromSelf(ChatMessage message)
    {
        return message.Sender == Username;
    }

    private void StartPrivateChat(string recipientName)
    {
        _chatChannel = ChatChannel.Private;
        _privateChatRecipient = recipientName;
        StateHasChanged();
    }
}
