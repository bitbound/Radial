@using Radial.Enums
@using Radial.Services
@using Radial.Services.Client
@using Radial.Data.Entities 
@inject IInputDispatcher InputDispatcher
@inject IClientConnection ClientConnection

<div class="action-bar-frame" tabindex="0" @onkeydown="OnKeyDown">
    @if (CharacterInfo?.EnergyCurrent < 1)
    {
        <button id="respawnButton" class="btn btn-danger" @onkeydown="Respawn">Respawn</button>
    }
    else
    {
        @if (CharacterInfo?.State == CharacterState.InCombat)
        {
            <button id="respawnButton" class="btn btn-danger" @onkeydown="Escape">Escape</button>
        }
        else
        {
            <div class="button-control-frame">
                <button class="btn btn-primary dpad-button top-button" title="Move North" @onclick="() => Move(MovementDirection.North)">N</button>
                <button class="btn btn-primary dpad-button right-button" title="Move East" @onclick="() => Move(MovementDirection.East)">E</button>
                <button class="btn btn-primary dpad-button bottom-button" title="Move South" @onclick="  () => Move(MovementDirection.South)">S</button>
                <button class="btn btn-primary dpad-button left-button" title="Move West" @onclick=" () => Move(MovementDirection.West)">W</button>
            </div>
        }

        <div class="button-control-frame">
            <div class="action-bonus-ring"
                 style="opacity: @CharacterInfo.ActionBonus; 
                        transform: translate(-50%, -50%) scale(@($"{CharacterInfo.ActionBonus},{CharacterInfo.ActionBonus}"));
                        border-color: @(CharacterInfo.ActionBonus > .9 ? "limegreen" : "unset")">

            </div>
            <div>
                <button class="btn btn-primary dpad-button top-button" title="Attack" @onclick="Attack">
                    <img src="/media/svg/sword.svg" />
                </button>
                <button class="btn btn-primary dpad-button right-button" title="Block" @onclick="Block">
                    <img src="/media/svg/shield.svg" />
                </button>
                <button class="btn btn-primary dpad-button bottom-button" title="Heal" @onclick="Heal">
                    <img src="/media/svg/heal.svg" />
                </button>
                <button class="btn btn-primary dpad-button left-button" title="Blast" @onclick="Blast">
                    <img src="/media/svg/blast.svg" />
                </button>
            </div>
        </div>

        <div class="target-button-frame">
            <button class="btn btn-sm btn-success target-button" title="Cycle Friendly Target" @onclick="CycleFriendlyTarget">
                <span class="oi oi-target"></span>
            </button>
            <button class="btn btn-sm btn-danger target-button" title="Cycle Enemy Target" @onclick="CycleEnemyTarget">
                <span class="oi oi-target"></span>
            </button>
        </div>
    }
</div>

@code {
    private PlayerCharacter CharacterInfo { get; set; }

    protected override Task OnInitializedAsync()
    {
        CharacterInfo = ClientConnection.Character;

        return base.OnInitializedAsync();
    }


    private void Attack()
    {
        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.Attack(ClientConnection);
        });
    }

    private void Blast()
    {
        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.Blast(ClientConnection);
        });
    }

    private void Block()
    {
        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.Block(ClientConnection);
        });
    }

    private void CycleEnemyTarget()
    {
        var location = ClientConnection.Location;

        var currentIndex = location.Characters.FindIndex(x => x.Name == CharacterInfo.Target?.Name);
        if (currentIndex == -1)
        {
            CharacterInfo.Target = location.Characters.Find(x => x.Type == CharacterType.NPC);
        }
        else
        {
            CharacterInfo.Target = location.Characters
                .Skip(currentIndex + 1)
                .FirstOrDefault(x => x.Type == CharacterType.NPC);
        }
    }

    private void CycleFriendlyTarget()
    {
        var location = ClientConnection.Location;

        var currentIndex = location.Characters.FindIndex(x => x.Name == CharacterInfo.Target?.Name);
        if (currentIndex == -1)
        {
            CharacterInfo.Target = location.Characters.Find(x => x.Type == CharacterType.Player);
        }
        else
        {
            CharacterInfo.Target = location.Characters
                .Skip(currentIndex + 1)
                .FirstOrDefault(x => x.Type == CharacterType.Player);
        }
    }

    private void Escape()
    {
        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.EscapeCombat(ClientConnection);
        });
    }

    private void Heal()
    {
        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.Heal(ClientConnection);
        });
    }

    private void Move(MovementDirection direction)
    {
        if (DateTimeOffset.Now - CharacterInfo.LastMoveTime < TimeSpan.FromSeconds(1))
        {
            return;
        }

        CharacterInfo.LastMoveTime = DateTimeOffset.Now;

        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.MoveCharacter(ClientConnection, direction);
        });
    }

    private void OnKeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "ArrowLeft":
            case "Left":
                Move(MovementDirection.West);
                break;
            case "ArrowUp":
            case "Up":
                Move(MovementDirection.North);
                break;
            case "ArrowRight":
            case "Right":
                Move(MovementDirection.East);
                break;
            case "ArrowDown":
            case "Down":
                Move(MovementDirection.South);
                break;
        }
    }

    private void Respawn()
    {
        ClientConnection.ExchangeInput(() =>
        {
            InputDispatcher.Respawn(ClientConnection);
        });
    }
}